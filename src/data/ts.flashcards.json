[
  { "question": "What is TypeScript?", "answer": "A superset of JavaScript that adds static types." },
  { "question": "How do you define a variable in TypeScript?", "answer": "Using let, const, or var with a type annotation." },
  { "question": "What is a type annotation?", "answer": "A way to explicitly declare the type of a variable." },
  { "question": "How do you define a function in TypeScript?", "answer": "function name(param: type): returnType { }" },
  { "question": "What is an interface?", "answer": "A way to define the shape of an object." },
  { "question": "How do you implement an interface?", "answer": "Using the implements keyword in a class." },
  { "question": "What is a union type?", "answer": "A type that can be one of several types." },
  { "question": "How do you define a union type?", "answer": "Using the | operator." },
  { "question": "What is a tuple?", "answer": "An array with a fixed number of elements of specific types." },
  { "question": "How do you define a tuple?", "answer": "Using [type1, type2, ...] syntax." },
  { "question": "What is an enum?", "answer": "A way to define a set of named constants." },
  { "question": "How do you define an enum?", "answer": "Using the enum keyword." },
  { "question": "What is type inference?", "answer": "The ability of TypeScript to infer the type of a variable." },
  { "question": "What is a type alias?", "answer": "A way to create a new name for a type." },
  { "question": "How do you define a type alias?", "answer": "Using the type keyword." },
  { "question": "What is a generic?", "answer": "A way to create reusable components with types." },
  { "question": "How do you define a generic function?", "answer": "Using <T> syntax." },
  { "question": "What is a module?", "answer": "A file that exports one or more members." },
  { "question": "How do you export a member?", "answer": "Using the export keyword." },
  { "question": "How do you import a member?", "answer": "Using the import keyword." },
  { "question": "What is a namespace?", "answer": "A way to group related code together." },
  { "question": "How do you define a namespace?", "answer": "Using the namespace keyword." },
  { "question": "What is the any type?", "answer": "A type that can be any value." },
  { "question": "What is the unknown type?", "answer": "A type that can be any value but requires type checking." },
  { "question": "What is the never type?", "answer": "A type that represents values that never occur." },
  { "question": "What is the void type?", "answer": "A type that represents the absence of a value." },
  { "question": "What is the difference between interface and type alias?", "answer": "Interfaces can be merged, type aliases cannot." },
  { "question": "What is a decorator?", "answer": "A special kind of declaration that can be attached to a class or method." },
  { "question": "How do you define a class in TypeScript?", "answer": "Using the class keyword." },
  { "question": "What is the readonly modifier?", "answer": "A modifier that makes a property immutable." },
  { "question": "What is the difference between let and const?", "answer": "let allows reassignment, const does not." },
  { "question": "What is the purpose of the keyof operator?", "answer": "To get a union of all keys of a type." },
  { "question": "What is the Partial utility type?", "answer": "A type that makes all properties of a type optional." },
  { "question": "What is the Pick utility type?", "answer": "A type that picks a set of properties from a type." },
  { "question": "What is the Omit utility type?", "answer": "A type that omits a set of properties from a type." },
  { "question": "What is the Record utility type?", "answer": "A type that creates an object type with specified keys and values." },
  { "question": "What is the ReturnType utility type?", "answer": "A type that infers the return type of a function." },
  { "question": "What is the Parameters utility type?", "answer": "A type that infers the parameter types of a function." }
]